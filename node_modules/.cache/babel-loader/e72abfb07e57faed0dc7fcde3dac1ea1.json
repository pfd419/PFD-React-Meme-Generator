{"ast":null,"code":"import _slicedToArray from \"D:\\\\Workspace\\\\Code\\\\ReactSample\\\\sample\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Workspace\\\\Code\\\\ReactSample\\\\sample\\\\src\\\\ThemeContext.js\";\nimport React, { createContext, useState } from \"react\";\nconst themes = {\n  light: {\n    name: 'light',\n    color: '#000000',\n    background: '#eeeeee'\n  },\n  dark: {\n    name: 'dark',\n    color: '#ffffff',\n    background: '#222222'\n  }\n};\nexport const ThemeContext = createContext({});\nexport const Provider = props => {\n  // Initial values are obtained from the props\n  const initialThemes = props.themes,\n        initialSelectedTheme = props.selectedTheme,\n        children = props.children; // Use State to keep the values\n\n  const _useState = useState(initialThemes),\n        _useState2 = _slicedToArray(_useState, 2),\n        themes = _useState2[0],\n        setThemes = _useState2[1];\n\n  const _useState3 = useState(initialSelectedTheme),\n        _useState4 = _slicedToArray(_useState3, 2),\n        selectedTheme = _useState4[0],\n        setSelectedTheme = _useState4[1];\n\n  const toggleTheme = () => {\n    this.setSelectedTheme(selectedTheme === themes.dark ? themes.light : themes.dark);\n  }; // Make the context object:\n\n\n  const themesContext = {\n    themes,\n    setThemes,\n    selectedTheme,\n    setSelectedTheme,\n    toggleTheme\n  };\n  console.log(themesContext); // pass the value in provider and return\n\n  return React.createElement(ThemeContext.Provider, {\n    value: themesContext,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, children);\n};\nconst Consumer = ThemeContext.Consumer;\nexport { Consumer };\nProvider.defaultProps = {\n  selectedTheme: themes.dark\n};","map":{"version":3,"sources":["D:\\Workspace\\Code\\ReactSample\\sample\\src\\ThemeContext.js"],"names":["React","createContext","useState","themes","light","name","color","background","dark","ThemeContext","Provider","props","initialThemes","initialSelectedTheme","selectedTheme","children","setThemes","setSelectedTheme","toggleTheme","themesContext","console","log","Consumer","defaultProps"],"mappings":";;AACA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,QAA+C,OAA/C;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,KAAK,EAAE;AACHC,IAAAA,IAAI,EAAE,OADH;AAEHC,IAAAA,KAAK,EAAE,SAFJ;AAGHC,IAAAA,UAAU,EAAE;AAHT,GADI;AAMXC,EAAAA,IAAI,EAAE;AACFH,IAAAA,IAAI,EAAE,MADJ;AAEFC,IAAAA,KAAK,EAAE,SAFL;AAGFC,IAAAA,UAAU,EAAE;AAHV;AANK,CAAf;AAaA,OAAO,MAAME,YAAY,GAAGR,aAAa,CAAC,EAAD,CAAlC;AAEP,OAAO,MAAMS,QAAQ,GAAGC,KAAK,IAAI;AAC7B;AAD6B,QAGjBC,aAHiB,GAMzBD,KANyB,CAGzBR,MAHyB;AAAA,QAIVU,oBAJU,GAMzBF,KANyB,CAIzBG,aAJyB;AAAA,QAKzBC,QALyB,GAMzBJ,KANyB,CAKzBI,QALyB,EAS7B;;AAT6B,oBAUDb,QAAQ,CAACU,aAAD,CAVP;AAAA;AAAA,QAUtBT,MAVsB;AAAA,QAUda,SAVc;;AAAA,qBAWad,QAAQ,CAACW,oBAAD,CAXrB;AAAA;AAAA,QAWtBC,aAXsB;AAAA,QAWPG,gBAXO;;AAa7B,QAAMC,WAAW,GAAG,MAAM;AACtB,SAAKD,gBAAL,CAAuBH,aAAa,KAAKX,MAAM,CAACK,IAAzB,GACjBL,MAAM,CAACC,KADU,GAEjBD,MAAM,CAACK,IAFb;AAGH,GAJD,CAb6B,CAmB7B;;;AACA,QAAMW,aAAa,GAAG;AAClBhB,IAAAA,MADkB;AAElBa,IAAAA,SAFkB;AAGlBF,IAAAA,aAHkB;AAIlBG,IAAAA,gBAJkB;AAKlBC,IAAAA;AALkB,GAAtB;AAQFE,EAAAA,OAAO,CAACC,GAAR,CAAYF,aAAZ,EA5B+B,CA8B/B;;AACA,SAAO,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEA,aAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8CJ,QAA9C,CAAP;AACD,CAhCM;MAkCQO,Q,GAAab,Y,CAAba,Q;;AAEfZ,QAAQ,CAACa,YAAT,GAAwB;AACtBT,EAAAA,aAAa,EAAEX,MAAM,CAACK;AADA,CAAxB","sourcesContent":["\r\nimport React, { createContext, useState } from \"react\";\r\n\r\nconst themes = {\r\n    light: {\r\n        name: 'light',\r\n        color: '#000000',\r\n        background: '#eeeeee',\r\n    },\r\n    dark: {\r\n        name: 'dark',\r\n        color: '#ffffff',\r\n        background: '#222222',\r\n    },\r\n};\r\n\r\nexport const ThemeContext = createContext({});\r\n\r\nexport const Provider = props => {\r\n    // Initial values are obtained from the props\r\n    const {\r\n        themes: initialThemes,\r\n        selectedTheme: initialSelectedTheme, \r\n        children\r\n    } = props;\r\n\r\n    \r\n    // Use State to keep the values\r\n    const [themes, setThemes] = useState(initialThemes);\r\n    const [selectedTheme, setSelectedTheme] = useState(initialSelectedTheme);\r\n\r\n    const toggleTheme = () => {\r\n        this.setSelectedTheme( selectedTheme === themes.dark\r\n            ? themes.light\r\n            : themes.dark)\r\n    };\r\n\r\n    // Make the context object:\r\n    const themesContext = {\r\n        themes,\r\n        setThemes,\r\n        selectedTheme,\r\n        setSelectedTheme,\r\n        toggleTheme\r\n    };\r\n\r\n  console.log(themesContext)\r\n\r\n  // pass the value in provider and return\r\n  return <ThemeContext.Provider value={themesContext}>{children}</ThemeContext.Provider>;\r\n};\r\n\r\nexport const { Consumer } = ThemeContext;\r\n\r\nProvider.defaultProps = {\r\n  selectedTheme: themes.dark\r\n};"]},"metadata":{},"sourceType":"module"}