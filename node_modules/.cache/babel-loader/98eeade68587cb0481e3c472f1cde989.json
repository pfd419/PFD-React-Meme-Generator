{"ast":null,"code":"import _defineProperty from \"D:\\\\Workspace\\\\Code\\\\ReactSample\\\\sample\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"D:\\\\Workspace\\\\Code\\\\ReactSample\\\\sample\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Workspace\\\\Code\\\\ReactSample\\\\sample\\\\src\\\\components\\\\theme-toggler-button.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext, useReducer } from \"react\";\nimport { ThemeContext, themes } from '../contexts/ThemeContext';\nconst themeContext = useContext(ThemeContext);\n\nfunction toggleThemeReducer(state, action) {\n  switch (action.type) {\n    case \"toggle\":\n      {\n        return {\n          selectedTheme: state.theme.selectedTheme === themes.dark ? themes.light : themes.dark\n        };\n      }\n\n    case \"light\":\n      {\n        return {\n          selectedTheme: themes.light\n        };\n      }\n\n    case \"dark\":\n      {\n        return {\n          selectedTheme: themes.dark\n        };\n      }\n\n    default:\n      {\n        throw new Error(\"Unhandled type: ${action.type}\");\n      }\n  }\n}\n\nfunction ThemeTogglerButton() {\n  const _useReducer = useReducer((state, action) => {\n    const changes = toggleThemeReducer(state, action);\n    return reducer(state, _objectSpread({}, action, {\n      changes\n    }));\n  }, {\n    selectedTheme: themeContext\n  }),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        selectedTheme = _useReducer2[0].selectedTheme,\n        dispatch = _useReducer2[1];\n\n  return React.createElement(\"section\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: setLight,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"Set Light\"), React.createElement(\"button\", {\n    onClick: setDark,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"Set Dark\"), React.createElement(\"button\", {\n    onClick: () => toggle(),\n    style: selectedTheme,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"Toggle Theme\"));\n}\n\nexport default ThemeTogglerButton;","map":{"version":3,"sources":["D:\\Workspace\\Code\\ReactSample\\sample\\src\\components\\theme-toggler-button.js"],"names":["React","useContext","useReducer","ThemeContext","themes","themeContext","toggleThemeReducer","state","action","type","selectedTheme","theme","dark","light","Error","ThemeTogglerButton","changes","reducer","dispatch","setLight","setDark","toggle"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,UAA5B,QAA8C,OAA9C;AACA,SAASC,YAAT,EAAuBC,MAAvB,QAAqC,0BAArC;AAEA,MAAMC,YAAY,GAAGJ,UAAU,CAACE,YAAD,CAA/B;;AAGA,SAASG,kBAAT,CAA4BC,KAA5B,EAAmCC,MAAnC,EAA2C;AACvC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,QAAL;AAAe;AACX,eAAO;AACHC,UAAAA,aAAa,EAAEH,KAAK,CAACI,KAAN,CAAYD,aAAZ,KAA8BN,MAAM,CAACQ,IAArC,GACTR,MAAM,CAACS,KADE,GAETT,MAAM,CAACQ;AAHV,SAAP;AAKH;;AACD,SAAK,OAAL;AAAc;AACV,eAAO;AAAEF,UAAAA,aAAa,EAAEN,MAAM,CAACS;AAAxB,SAAP;AACH;;AACD,SAAK,MAAL;AAAa;AACT,eAAO;AAAEH,UAAAA,aAAa,EAAEN,MAAM,CAACQ;AAAxB,SAAP;AACH;;AACD;AAAS;AACL,cAAM,IAAIE,KAAJ,CAAU,gCAAV,CAAN;AACH;AAhBL;AAkBH;;AAID,SAASC,kBAAT,GAA8B;AAAA,sBACYb,UAAU,CAC5C,CAACK,KAAD,EAAQC,MAAR,KAAmB;AACf,UAAMQ,OAAO,GAAGV,kBAAkB,CAACC,KAAD,EAAQC,MAAR,CAAlC;AACA,WAAOS,OAAO,CAACV,KAAD,oBAAaC,MAAb;AAAqBQ,MAAAA;AAArB,OAAd;AACH,GAJ2C,EAK5C;AAAEN,IAAAA,aAAa,EAAEL;AAAjB,GAL4C,CADtB;AAAA;AAAA,QACjBK,aADiB,mBACjBA,aADiB;AAAA,QACAQ,QADA;;AAW1B,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAQ,IAAA,OAAO,EAAEC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,EAEI;AAAQ,IAAA,OAAO,EAAEC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAGI;AACI,IAAA,OAAO,EAAE,MAAMC,MAAM,EADzB;AAEI,IAAA,KAAK,EAAEX,aAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHJ,CADJ;AAWH;;AAMD,eAAeK,kBAAf","sourcesContent":["import React, { useContext, useReducer } from \"react\";\r\nimport { ThemeContext, themes } from '../contexts/ThemeContext';\r\n\r\nconst themeContext = useContext(ThemeContext);\r\n\r\n\r\nfunction toggleThemeReducer(state, action) {\r\n    switch (action.type) {\r\n        case \"toggle\": {\r\n            return {\r\n                selectedTheme: state.theme.selectedTheme === themes.dark\r\n                    ? themes.light\r\n                    : themes.dark\r\n            }\r\n        }\r\n        case \"light\": {\r\n            return { selectedTheme: themes.light }\r\n        }\r\n        case \"dark\": {\r\n            return { selectedTheme: themes.dark }\r\n        }\r\n        default: {\r\n            throw new Error(\"Unhandled type: ${action.type}\")\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction ThemeTogglerButton() {\r\n    const [{ selectedTheme }, dispatch] = useReducer(\r\n        (state, action) => {\r\n            const changes = toggleThemeReducer(state, action)\r\n            return reducer(state, { ...action, changes })\r\n        },\r\n        { selectedTheme: themeContext }\r\n    );\r\n\r\n    \r\n\r\n    return (\r\n        <section>\r\n            <button onClick={setLight}>Set Light</button>\r\n            <button onClick={setDark}>Set Dark</button>\r\n            <button\r\n                onClick={() => toggle()}\r\n                style={selectedTheme}>\r\n                Toggle Theme\r\n            </button>\r\n        </section>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default ThemeTogglerButton;"]},"metadata":{},"sourceType":"module"}