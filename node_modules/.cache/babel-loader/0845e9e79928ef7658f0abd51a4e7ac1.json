{"ast":null,"code":"import _defineProperty from \"D:\\\\Workspace\\\\Code\\\\ReactSample\\\\sample\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"D:\\\\Workspace\\\\Code\\\\ReactSample\\\\sample\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Workspace\\\\Code\\\\ReactSample\\\\sample\\\\src\\\\components\\\\theme-toggler-button.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext, useReducer, useEffect } from \"react\";\nimport { ThemeContext, themes } from '../contexts/ThemeContext';\n\nfunction toggleThemeReducer(state, action) {\n  switch (action.type) {\n    case \"toggle\":\n      {\n        return state.name === themes.dark.name ? themes.light : themes.dark;\n      }\n\n    case \"light\":\n      {\n        return themes.light;\n      }\n\n    case \"dark\":\n      {\n        return themes.dark;\n      }\n\n    default:\n      {\n        throw new Error(\"Unhandled type: {action.type}\");\n      }\n  }\n}\n\nfunction useToggleTheme({\n  reducer = (s, a) => a.changes\n} = {}) {\n  const themeContext = useContext(ThemeContext);\n\n  const _useReducer = useReducer((state, action) => {\n    const changes = toggleThemeReducer(state, action);\n    return reducer(state, _objectSpread({}, action, {\n      changes\n    }));\n  }, themeContext.selectedTheme),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        selectedTheme = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  const toggle = () => dispatch({\n    type: \"toggle\"\n  });\n\n  const setLight = () => dispatch({\n    type: \"light\"\n  });\n\n  const setDark = () => dispatch({\n    type: \"dark\"\n  });\n\n  return {\n    selectedTheme,\n    toggle,\n    setLight,\n    setDark\n  };\n}\n\nexport default function ThemeTogglerButton() {\n  const themeContext = useContext(ThemeContext);\n\n  const _useToggleTheme = useToggleTheme({\n    reducer(selectedTheme, action) {\n      return action.changes;\n    }\n\n  }),\n        selectedTheme = _useToggleTheme.selectedTheme,\n        toggle = _useToggleTheme.toggle,\n        setLight = _useToggleTheme.setLight,\n        setDark = _useToggleTheme.setDark; // Pass new state via context when selectedTheme has changed\n\n\n  useEffect(() => {\n    console.log(themeContext);\n\n    if (themeContext.selectedTheme !== selectedTheme) {\n      debugger;\n      themeContext.setSelectedTheme(selectedTheme);\n    }\n  });\n  return React.createElement(\"section\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: setLight,\n    style: selectedTheme,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"Set Light\"), React.createElement(\"button\", {\n    onClick: setDark,\n    style: selectedTheme,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Set Dark\"), React.createElement(\"button\", {\n    onClick: toggle,\n    style: selectedTheme,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"Toggle Theme\"));\n}","map":{"version":3,"sources":["D:\\Workspace\\Code\\ReactSample\\sample\\src\\components\\theme-toggler-button.js"],"names":["React","useContext","useReducer","useEffect","ThemeContext","themes","toggleThemeReducer","state","action","type","name","dark","light","Error","useToggleTheme","reducer","s","a","changes","themeContext","selectedTheme","dispatch","toggle","setLight","setDark","ThemeTogglerButton","console","log","setSelectedTheme"],"mappings":"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","sourcesContent":["import React, { useContext, useReducer, useEffect } from \"react\";\r\nimport { ThemeContext, themes } from '../contexts/ThemeContext';\r\n\r\nfunction toggleThemeReducer(state, action) {\r\n    switch (action.type) {\r\n        case \"toggle\": {\r\n            return state.name === themes.dark.name\r\n                ? themes.light\r\n                : themes.dark;\r\n        }\r\n        case \"light\": {\r\n            return themes.light;\r\n        }\r\n        case \"dark\": {\r\n            return themes.dark;\r\n        }\r\n        default: {\r\n            throw new Error(\"Unhandled type: {action.type}\");\r\n        }\r\n    }\r\n}\r\n\r\nfunction useToggleTheme({ reducer = (s, a) => a.changes } = {}) {\r\n    const themeContext = useContext(ThemeContext);\r\n\r\n    const [selectedTheme, dispatch] = useReducer(\r\n        (state, action) => {\r\n            const changes = toggleThemeReducer(state, action);\r\n            return reducer(state, { ...action, changes })\r\n        },\r\n        themeContext.selectedTheme\r\n    );\r\n\r\n    const toggle = () => dispatch({ type: \"toggle\" });\r\n    const setLight = () => dispatch({ type: \"light\" });\r\n    const setDark = () => dispatch({ type: \"dark\" });\r\n\r\n    return { selectedTheme, toggle, setLight, setDark }\r\n}\r\n\r\n\r\nexport default function ThemeTogglerButton() {\r\n    const themeContext = useContext(ThemeContext);\r\n    const { selectedTheme, toggle, setLight, setDark } = useToggleTheme({\r\n        reducer(selectedTheme, action) {\r\n            return action.changes;\r\n        }\r\n    });\r\n\r\n    // Pass new state via context when selectedTheme has changed\r\n    useEffect(() => {\r\n        console.log(themeContext);\r\n        if (themeContext.selectedTheme !== selectedTheme) {\r\n            debugger;\r\n            themeContext.setSelectedTheme(selectedTheme);\r\n        }\r\n    });\r\n\r\n    return (\r\n        <section>\r\n            <button onClick={setLight} style={selectedTheme}>Set Light</button>\r\n            <button onClick={setDark} style={selectedTheme}>Set Dark</button>\r\n            <button onClick={toggle} style={selectedTheme}>\r\n                Toggle Theme\r\n            </button>\r\n        </section>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}