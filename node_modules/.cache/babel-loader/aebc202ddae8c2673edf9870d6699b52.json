{"ast":null,"code":"import _defineProperty from \"D:\\\\Workspace\\\\Code\\\\ReactSample\\\\sample\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"D:\\\\Workspace\\\\Code\\\\ReactSample\\\\sample\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Workspace\\\\Code\\\\ReactSample\\\\sample\\\\src\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Switch from './switch';\n\nfunction toggleReducer(state, action) {\n  switch (action.type) {\n    case useToggle.types.toggle:\n      {\n        return {\n          on: !state.on\n        };\n      }\n\n    case useToggle.types.on:\n      {\n        return {\n          on: true\n        };\n      }\n\n    case useToggle.types.off:\n      {\n        return {\n          on: false\n        };\n      }\n\n    default:\n      {\n        throw new Error(\"Unhandled type: \".concat(action.type));\n      }\n  }\n}\n\nfunction useToggle({\n  reducer = (s, a) => a.changes\n} = {}) {\n  const _React$useReducer = React.useReducer((state, action) => {\n    const changes = toggleReducer(state, action);\n    return reducer(state, _objectSpread({}, action, {\n      changes\n    }));\n  }, {\n    on: false\n  }),\n        _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n        on = _React$useReducer2[0].on,\n        dispatch = _React$useReducer2[1];\n\n  const toggle = () => dispatch({\n    type: useToggle.types.toggle\n  });\n\n  const setOn = () => dispatch({\n    type: useToggle.types.on\n  });\n\n  const setOff = () => dispatch({\n    type: useToggle.types.off\n  });\n\n  return {\n    on,\n    toggle,\n    setOn,\n    setOff\n  };\n}\n\nuseToggle.types = {\n  toggle: 'TOGGLE',\n  on: 'ON',\n  off: 'OFF'\n};\n\nfunction Toggle() {\n  const _React$useState = React.useState(0),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        clicksSinceReset = _React$useState2[0],\n        setClicksSinceReset = _React$useState2[1];\n\n  const tooManyClicks = clicksSinceReset >= 4;\n\n  const _useToggle = useToggle({\n    reducer(currentState, action) {\n      if (tooManyClicks && action.type === useToggle.types.toggle) {\n        // other changes are fine, but on needs to be unchanged\n        return _objectSpread({}, action.changes, {\n          on: currentState.on\n        });\n      } else {\n        // the changes are fine\n        return action.changes;\n      }\n    }\n\n  }),\n        on = _useToggle.on,\n        toggle = _useToggle.toggle,\n        setOn = _useToggle.setOn,\n        setOff = _useToggle.setOff;\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: setOff,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"Switch Off\"), React.createElement(\"button\", {\n    onClick: setOn,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Switch On\"), React.createElement(Switch, {\n    onClick: () => {\n      toggle();\n      setClicksSinceReset(count => count + 1);\n    },\n    on: on,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), tooManyClicks ? React.createElement(\"button\", {\n    onClick: () => setClicksSinceReset(0),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"Reset\") : null);\n}\n\nfunction App() {\n  return React.createElement(Toggle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  });\n}\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 72\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["D:\\Workspace\\Code\\ReactSample\\sample\\src\\index.js"],"names":["React","ReactDOM","Switch","toggleReducer","state","action","type","useToggle","types","toggle","on","off","Error","reducer","s","a","changes","useReducer","dispatch","setOn","setOff","Toggle","useState","clicksSinceReset","setClicksSinceReset","tooManyClicks","currentState","count","App","render","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Switch from './switch'\nfunction toggleReducer(state, action) {\n  switch (action.type) {\n    case useToggle.types.toggle: {\n      return {on: !state.on}\n    }\n    case useToggle.types.on: {\n      return {on: true}\n    }\n    case useToggle.types.off: {\n      return {on: false}\n    }\n    default: {\n      throw new Error(`Unhandled type: ${action.type}`)\n    }\n  }\n}\nfunction useToggle({reducer = (s, a) => a.changes} = {}) {\n  const [{on}, dispatch] = React.useReducer(\n    (state, action) => {\n      const changes = toggleReducer(state, action)\n      return reducer(state, {...action, changes})\n    },\n    {on: false},\n  )\n  const toggle = () => dispatch({type: useToggle.types.toggle})\n  const setOn = () => dispatch({type: useToggle.types.on})\n  const setOff = () => dispatch({type: useToggle.types.off})\n  return {on, toggle, setOn, setOff}\n}\nuseToggle.types = {\n  toggle: 'TOGGLE',\n  on: 'ON',\n  off: 'OFF',\n}\nfunction Toggle() {\n  const [clicksSinceReset, setClicksSinceReset] = React.useState(0)\n  const tooManyClicks = clicksSinceReset >= 4\n  const {on, toggle, setOn, setOff} = useToggle({\n    reducer(currentState, action) {\n      if (tooManyClicks && action.type === useToggle.types.toggle) {\n        // other changes are fine, but on needs to be unchanged\n        return {...action.changes, on: currentState.on}\n      } else {\n        // the changes are fine\n        return action.changes\n      }\n    },\n  })\n  return (\n    <div>\n      <button onClick={setOff}>Switch Off</button>\n      <button onClick={setOn}>Switch On</button>\n      <Switch\n        onClick={() => {\n          toggle()\n          setClicksSinceReset(count => count + 1)\n        }}\n        on={on}\n      />\n      {tooManyClicks ? (\n        <button onClick={() => setClicksSinceReset(0)}>Reset</button>\n      ) : null}\n    </div>\n  )\n}\nfunction App() {\n  return <Toggle />\n}\nReactDOM.render(<App />, document.getElementById('root'))"]},"metadata":{},"sourceType":"module"}