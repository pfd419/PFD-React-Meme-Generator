{"ast":null,"code":"import _defineProperty from \"D:\\\\Workspace\\\\Code\\\\ReactSample\\\\sample\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"D:\\\\Workspace\\\\Code\\\\ReactSample\\\\sample\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Workspace\\\\Code\\\\ReactSample\\\\sample\\\\src\\\\components\\\\user-input.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext, userReducer } from \"react\";\nimport { UserContext } from '../contexts/UserContext';\n\nfunction setUserName(state, value) {\n  return {\n    id: state.id,\n    name: value\n  };\n}\n\nfunction useSetUserName({\n  reducer = (s, a) => a.changes\n} = {}) {\n  const userContext = useContext(UserContext);\n\n  const _useReducer = useReducer((state, value) => {\n    const changes = toggleThemeReducer(state, value);\n    return reducer(state, _objectSpread({}, value, {\n      changes\n    }));\n  }, userContext.user),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        signedInUser = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  const setUserName = value => dispatch(value);\n\n  return {\n    signedInUser,\n    setUserName\n  };\n}\n\nfunction UserInput() {\n  const userContext = useContext(UserContext);\n\n  const _useToggleTheme = useToggleTheme({\n    reducer(selectedTheme, action) {\n      return action.changes;\n    }\n\n  }),\n        signedInUser = _useToggleTheme.signedInUser,\n        setUserName = _useToggleTheme.setUserName; // Pass new state via context when selectedTheme has changed\n\n\n  useEffect(() => {\n    if (userContext.signedInUser !== signedInUser) {\n      userContext.setUserName(userContext.signedInUser);\n    }\n  });\n  return React.createElement(\"section\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"User Name: \"), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    onChange: setUserName,\n    value: userContext.signedInUser.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }));\n}\n\nexport default UserInput;","map":{"version":3,"sources":["D:\\Workspace\\Code\\ReactSample\\sample\\src\\components\\user-input.js"],"names":["React","useContext","userReducer","UserContext","setUserName","state","value","id","name","useSetUserName","reducer","s","a","changes","userContext","useReducer","toggleThemeReducer","user","signedInUser","dispatch","UserInput","useToggleTheme","selectedTheme","action","useEffect"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,WAA5B,QAA+C,OAA/C;AACA,SAASC,WAAT,QAA4B,yBAA5B;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,KAA5B,EAAmC;AAC/B,SAAO;AACHC,IAAAA,EAAE,EAAEF,KAAK,CAACE,EADP;AAEHC,IAAAA,IAAI,EAAEF;AAFH,GAAP;AAIH;;AAED,SAASG,cAAT,CAAwB;AAAEC,EAAAA,OAAO,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACC;AAAxB,IAAoC,EAA5D,EAAgE;AAC5D,QAAMC,WAAW,GAAGb,UAAU,CAACE,WAAD,CAA9B;;AAD4D,sBAG3BY,UAAU,CACvC,CAACV,KAAD,EAAQC,KAAR,KAAkB;AACd,UAAMO,OAAO,GAAGG,kBAAkB,CAACX,KAAD,EAAQC,KAAR,CAAlC;AACA,WAAOI,OAAO,CAACL,KAAD,oBAAaC,KAAb;AAAoBO,MAAAA;AAApB,OAAd;AACH,GAJsC,EAKvCC,WAAW,CAACG,IAL2B,CAHiB;AAAA;AAAA,QAGrDC,YAHqD;AAAA,QAGvCC,QAHuC;;AAW5D,QAAMf,WAAW,GAAIE,KAAD,IAAWa,QAAQ,CAACb,KAAD,CAAvC;;AAEA,SAAO;AAAEY,IAAAA,YAAF;AAAgBd,IAAAA;AAAhB,GAAP;AACH;;AAED,SAASgB,SAAT,GAAqB;AACjB,QAAMN,WAAW,GAAGb,UAAU,CAACE,WAAD,CAA9B;;AADiB,0BAEqBkB,cAAc,CAAC;AACjDX,IAAAA,OAAO,CAACY,aAAD,EAAgBC,MAAhB,EAAwB;AAC3B,aAAOA,MAAM,CAACV,OAAd;AACH;;AAHgD,GAAD,CAFnC;AAAA,QAETK,YAFS,mBAETA,YAFS;AAAA,QAEKd,WAFL,mBAEKA,WAFL,EAQjB;;;AACAoB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIV,WAAW,CAACI,YAAZ,KAA6BA,YAAjC,EAA+C;AAC3CJ,MAAAA,WAAW,CAACV,WAAZ,CAAwBU,WAAW,CAACI,YAApC;AACH;AACJ,GAJQ,CAAT;AAOA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,EAEI;AACI,IAAA,IAAI,EAAC,MADT;AAEI,IAAA,IAAI,EAAC,MAFT;AAGI,IAAA,QAAQ,EAAEd,WAHd;AAII,IAAA,KAAK,EAAEU,WAAW,CAACI,YAAZ,CAAyBV,IAJpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAUH;;AAGD,eAAeY,SAAf","sourcesContent":["import React, { useContext, userReducer } from \"react\";\r\nimport { UserContext } from '../contexts/UserContext';\r\n\r\nfunction setUserName(state, value) {\r\n    return {\r\n        id: state.id,\r\n        name: value\r\n    }\r\n}\r\n\r\nfunction useSetUserName({ reducer = (s, a) => a.changes } = {}) {\r\n    const userContext = useContext(UserContext);\r\n\r\n    const [signedInUser, dispatch] = useReducer(\r\n        (state, value) => {\r\n            const changes = toggleThemeReducer(state, value);\r\n            return reducer(state, { ...value, changes })\r\n        },\r\n        userContext.user\r\n    );\r\n\r\n    const setUserName = (value) => dispatch(value);\r\n\r\n    return { signedInUser, setUserName }\r\n}\r\n\r\nfunction UserInput() {\r\n    const userContext = useContext(UserContext);\r\n    const { signedInUser, setUserName } = useToggleTheme({\r\n        reducer(selectedTheme, action) {\r\n            return action.changes;\r\n        }\r\n    });\r\n\r\n    // Pass new state via context when selectedTheme has changed\r\n    useEffect(() => {\r\n        if (userContext.signedInUser !== signedInUser) {\r\n            userContext.setUserName(userContext.signedInUser);\r\n        }\r\n    });\r\n\r\n\r\n    return (\r\n        <section>\r\n            <strong>User Name: </strong>\r\n            <input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                onChange={setUserName}\r\n                value={userContext.signedInUser.name} />\r\n        </section>\r\n    );\r\n}\r\n\r\n\r\nexport default UserInput;"]},"metadata":{},"sourceType":"module"}