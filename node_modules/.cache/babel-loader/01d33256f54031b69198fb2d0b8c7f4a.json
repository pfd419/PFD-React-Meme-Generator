{"ast":null,"code":"import _defineProperty from \"D:\\\\Workspace\\\\Code\\\\ReactSample\\\\sample\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"D:\\\\Workspace\\\\Code\\\\ReactSample\\\\sample\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Workspace\\\\Code\\\\ReactSample\\\\sample\\\\src\\\\components\\\\theme-toggler-button.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext, useReducer } from \"react\";\nimport { ThemeContext, themes } from '../contexts/ThemeContext';\n\nfunction toggleThemeReducer(state, action) {\n  switch (action.type) {\n    case \"toggle\":\n      {\n        return {\n          selectedTheme: state.theme.selectedTheme === themes.dark ? themes.light : themes.dark\n        };\n      }\n\n    case \"light\":\n      {\n        return {\n          selectedTheme: themes.light\n        };\n      }\n\n    case \"dark\":\n      {\n        return {\n          selectedTheme: themes.dark\n        };\n      }\n\n    default:\n      {\n        throw new Error(\"Unhandled type: ${action.type}\");\n      }\n  }\n}\n\nfunction toggleTheme({\n  reducer = (s, a) => a.changes\n} = {}) {\n  const _useReducer = useReducer((state, action) => {\n    const changes = toggleThemeReducer(state, action);\n    return reducer(state, _objectSpread({}, action, {\n      changes\n    }));\n  }, {\n    selectedTheme: useContext(ThemeContext)\n  }),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        selectedTheme = _useReducer2[0].selectedTheme,\n        dispatch = _useReducer2[1];\n\n  const toggle = () => dispatch({\n    type: \"toggle\"\n  });\n\n  const setLight = () => dispatch({\n    type: \"light\"\n  });\n\n  const setDark = () => dispatch({\n    type: \"dark\"\n  });\n\n  return {\n    selectedTheme,\n    toggle,\n    setLight,\n    setDark\n  };\n}\n\nfunction ThemeTogglerButton() {\n  const _toggleTheme = toggleTheme({\n    reducer(currentState, action) {\n      return action.changes;\n    }\n\n  }),\n        selectedTheme = _toggleTheme.selectedTheme,\n        toggle = _toggleTheme.toggle,\n        setOn = _toggleTheme.setOn,\n        setOff = _toggleTheme.setOff;\n\n  return React.createElement(\"section\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: toggleTheme,\n    style: selectedTheme,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Toggle Theme\"));\n}\n\nexport default ThemeTogglerButton;","map":{"version":3,"sources":["D:\\Workspace\\Code\\ReactSample\\sample\\src\\components\\theme-toggler-button.js"],"names":["React","useContext","useReducer","ThemeContext","themes","toggleThemeReducer","state","action","type","selectedTheme","theme","dark","light","Error","toggleTheme","reducer","s","a","changes","dispatch","toggle","setLight","setDark","ThemeTogglerButton","currentState","setOn","setOff"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,UAA5B,QAA8C,OAA9C;AACA,SAASC,YAAT,EAAuBC,MAAvB,QAAqC,0BAArC;;AAEA,SAASC,kBAAT,CAA4BC,KAA5B,EAAmCC,MAAnC,EAA2C;AACvC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,QAAL;AAAe;AACX,eAAO;AACHC,UAAAA,aAAa,EAAEH,KAAK,CAACI,KAAN,CAAYD,aAAZ,KAA8BL,MAAM,CAACO,IAArC,GACTP,MAAM,CAACQ,KADE,GAETR,MAAM,CAACO;AAHV,SAAP;AAKH;;AACD,SAAK,OAAL;AAAc;AACV,eAAO;AAAEF,UAAAA,aAAa,EAAEL,MAAM,CAACQ;AAAxB,SAAP;AACH;;AACD,SAAK,MAAL;AAAa;AACT,eAAO;AAAEH,UAAAA,aAAa,EAAEL,MAAM,CAACO;AAAxB,SAAP;AACH;;AACD;AAAS;AACL,cAAM,IAAIE,KAAJ,CAAU,gCAAV,CAAN;AACH;AAhBL;AAkBH;;AAED,SAASC,WAAT,CAAqB;AAAEC,EAAAA,OAAO,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACC;AAAxB,IAAoC,EAAzD,EAA6D;AAAA,sBACnBhB,UAAU,CAC5C,CAACI,KAAD,EAAQC,MAAR,KAAmB;AACf,UAAMW,OAAO,GAAGb,kBAAkB,CAACC,KAAD,EAAQC,MAAR,CAAlC;AACA,WAAOQ,OAAO,CAACT,KAAD,oBAAaC,MAAb;AAAqBW,MAAAA;AAArB,OAAd;AACH,GAJ2C,EAK5C;AAAET,IAAAA,aAAa,EAAER,UAAU,CAACE,YAAD;AAA3B,GAL4C,CADS;AAAA;AAAA,QAChDM,aADgD,mBAChDA,aADgD;AAAA,QAC/BU,QAD+B;;AASzD,QAAMC,MAAM,GAAG,MAAMD,QAAQ,CAAC;AAAEX,IAAAA,IAAI,EAAE;AAAR,GAAD,CAA7B;;AACA,QAAMa,QAAQ,GAAG,MAAMF,QAAQ,CAAC;AAAEX,IAAAA,IAAI,EAAE;AAAR,GAAD,CAA/B;;AACA,QAAMc,OAAO,GAAG,MAAMH,QAAQ,CAAC;AAAEX,IAAAA,IAAI,EAAE;AAAR,GAAD,CAA9B;;AAEA,SAAO;AAAEC,IAAAA,aAAF;AAAiBW,IAAAA,MAAjB;AAAyBC,IAAAA,QAAzB;AAAmCC,IAAAA;AAAnC,GAAP;AACH;;AAED,SAASC,kBAAT,GAA8B;AAAA,uBACuBT,WAAW,CAAC;AACzDC,IAAAA,OAAO,CAACS,YAAD,EAAejB,MAAf,EAAuB;AAC1B,aAAOA,MAAM,CAACW,OAAd;AACH;;AAHwD,GAAD,CADlC;AAAA,QAClBT,aADkB,gBAClBA,aADkB;AAAA,QACHW,MADG,gBACHA,MADG;AAAA,QACKK,KADL,gBACKA,KADL;AAAA,QACYC,MADZ,gBACYA,MADZ;;AAO1B,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AACI,IAAA,OAAO,EAAEZ,WADb;AAEI,IAAA,KAAK,EAAEL,aAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,CADJ;AASH;;AAGD,eAAec,kBAAf","sourcesContent":["import React, { useContext, useReducer } from \"react\";\r\nimport { ThemeContext, themes } from '../contexts/ThemeContext';\r\n\r\nfunction toggleThemeReducer(state, action) {\r\n    switch (action.type) {\r\n        case \"toggle\": {\r\n            return {\r\n                selectedTheme: state.theme.selectedTheme === themes.dark\r\n                    ? themes.light\r\n                    : themes.dark\r\n            }\r\n        }\r\n        case \"light\": {\r\n            return { selectedTheme: themes.light }\r\n        }\r\n        case \"dark\": {\r\n            return { selectedTheme: themes.dark }\r\n        }\r\n        default: {\r\n            throw new Error(\"Unhandled type: ${action.type}\")\r\n        }\r\n    }\r\n}\r\n\r\nfunction toggleTheme({ reducer = (s, a) => a.changes } = {}) {\r\n    const [{ selectedTheme }, dispatch] = useReducer(\r\n        (state, action) => {\r\n            const changes = toggleThemeReducer(state, action)\r\n            return reducer(state, { ...action, changes })\r\n        },\r\n        { selectedTheme: useContext(ThemeContext) }\r\n    )\r\n\r\n    const toggle = () => dispatch({ type: \"toggle\" })\r\n    const setLight = () => dispatch({ type: \"light\" })\r\n    const setDark = () => dispatch({ type: \"dark\" })\r\n\r\n    return { selectedTheme, toggle, setLight, setDark }\r\n}\r\n\r\nfunction ThemeTogglerButton() {\r\n    const { selectedTheme, toggle, setOn, setOff } = toggleTheme({\r\n        reducer(currentState, action) {\r\n            return action.changes\r\n        },\r\n    })\r\n\r\n    return (\r\n        <section>\r\n            <button\r\n                onClick={toggleTheme}\r\n                style={selectedTheme}>\r\n                Toggle Theme\r\n            </button>\r\n        </section>\r\n    );\r\n}\r\n\r\n\r\nexport default ThemeTogglerButton;"]},"metadata":{},"sourceType":"module"}