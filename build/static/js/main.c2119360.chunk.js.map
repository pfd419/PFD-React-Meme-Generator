{"version":3,"sources":["contexts/ThemeContext.js","contexts/UserContext.js","pages/profile-page.js","components/theme-toggler-button.js","components/user-input.js","pages/input-page.js","App.js","serviceWorker.js","index.js"],"names":["themes","light","name","color","background","dark","ThemeContext","React","createContext","user","id","UserContext","ProfilePage","selectedTheme","useContext","useToggleTheme","reducer","s","a","changes","themeContext","useReducer","state","action","type","Error","toggleThemeReducer","dispatch","toggle","setLight","setDark","ThemeTogglerButton","useEffect","setTheme","onClick","style","useSetUserName","userContext","value","setUserNameReducer","signedInUser","setUserName","UserInput","setUser","onChange","x","target","handleOnSubmit","event","preventDefault","InputPage","onSubmit","Layout","Consumer","theme","Header","Toolbar","Content","margin","to","paddingLeft","exact","path","component","App","setState","Provider","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c2119360.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const themes = {\r\n  light: {\r\n    name: 'Light',\r\n    color: '#000000',\r\n    background: '#eeeeee'\r\n  },\r\n  dark: {\r\n    name: 'Dark',\r\n    color: '#ffffff',\r\n    background: '#222222'\r\n  },\r\n};\r\n\r\nexport const ThemeContext = React.createContext(\r\n  themes.dark // default value\r\n);\r\n","import React from \"react\";\r\n\r\n\r\n// Signed-in user context\r\nexport const user = {\r\n    name: 'Guest',\r\n    id: 1\r\n}\r\n\r\nexport const UserContext = React.createContext({\r\n    user: user   //default Value\r\n});\r\n  ","import React, { useContext } from \"react\";\r\nimport { ThemeContext } from '../contexts/ThemeContext';\r\nimport { UserContext } from '../contexts/UserContext';\r\n\r\nexport default function ProfilePage() {\r\n    const themeContext = useContext(ThemeContext);\r\n    const { selectedTheme } = themeContext;\r\n    const userContext = useContext(UserContext);\r\n    const { user } = userContext;\r\n\r\n    return (\r\n        <div>\r\n            <section>\r\n                <strong>User Name:</strong> {user.name}\r\n            </section>\r\n            <br />\r\n            <section>\r\n                <strong>Theme:</strong> {selectedTheme.name}\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useContext, useReducer, useEffect } from \"react\";\r\nimport { ThemeContext, themes } from '../contexts/ThemeContext';\r\n\r\nfunction toggleThemeReducer(state, action) {\r\n    switch (action.type) {\r\n        case \"toggle\": {\r\n            return state.name === themes.dark.name\r\n                ? themes.light\r\n                : themes.dark;\r\n        }\r\n        case \"light\": {\r\n            return themes.light;\r\n        }\r\n        case \"dark\": {\r\n            return themes.dark;\r\n        }\r\n        default: {\r\n            throw new Error(\"Unhandled type: {action.type}\");\r\n        }\r\n    }\r\n}\r\n\r\nfunction useToggleTheme({ reducer = (s, a) => a.changes } = {}) {\r\n    const themeContext = useContext(ThemeContext);\r\n\r\n    const [selectedTheme, dispatch] = useReducer(\r\n        (state, action) => {\r\n            const changes = toggleThemeReducer(state, action);\r\n            return reducer(state, { ...action, changes })\r\n        },\r\n        themeContext.selectedTheme\r\n    );\r\n\r\n    const toggle = () => dispatch({ type: \"toggle\" });\r\n    const setLight = () => dispatch({ type: \"light\" });\r\n    const setDark = () => dispatch({ type: \"dark\" });\r\n\r\n    return { selectedTheme, toggle, setLight, setDark }\r\n}\r\n\r\n\r\nexport default function ThemeTogglerButton() {\r\n    const themeContext = useContext(ThemeContext);\r\n    const { selectedTheme, toggle, setLight, setDark } = useToggleTheme({\r\n        reducer(selectedTheme, action) {\r\n            return action.changes;\r\n        }\r\n    });\r\n\r\n    // Pass new state via context when selectedTheme has changed\r\n    useEffect(() => {\r\n        if (themeContext.selectedTheme !== selectedTheme) {\r\n            themeContext.setTheme(selectedTheme);\r\n        }\r\n    });\r\n\r\n    return (\r\n        <section>\r\n            <button onClick={setLight} style={selectedTheme}>Set Light</button>\r\n            <button onClick={setDark} style={selectedTheme}>Set Dark</button>\r\n            <button onClick={toggle} style={selectedTheme}>\r\n                Toggle Theme\r\n            </button>\r\n        </section>\r\n    );\r\n}\r\n","import React, { useContext, useReducer, useEffect } from \"react\";\r\nimport { UserContext } from '../contexts/UserContext';\r\n\r\nfunction setUserNameReducer(state, value) {\r\n    return {\r\n        id: state.id,\r\n        name: value\r\n    }\r\n}\r\n\r\nfunction useSetUserName({ reducer = (s, a) => a.changes } = {}) {\r\n    const userContext = useContext(UserContext);\r\n\r\n    const [signedInUser, dispatch] = useReducer(\r\n        (state, value) => {\r\n            const changes = setUserNameReducer(state, value);\r\n            return reducer(state, { ...value, changes })\r\n        },\r\n        userContext.user\r\n    );\r\n\r\n    const setUserName = (value) => dispatch(value);\r\n\r\n    return { signedInUser, setUserName }\r\n}\r\n\r\nfunction UserInput() {\r\n    const userContext = useContext(UserContext);\r\n    const { signedInUser, setUserName } = useSetUserName({\r\n        reducer(signedInUser, value) {\r\n            return value.changes;\r\n        }\r\n    });\r\n\r\n    // Pass new state via context when selectedTheme has changed\r\n    useEffect(() => {\r\n        if (userContext.user !== signedInUser) {\r\n            userContext.setUser(signedInUser);\r\n        }\r\n    });\r\n\r\n    return (\r\n        <section>\r\n            <strong>User Name: </strong>\r\n            <input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                onChange={(x => {setUserName(x.target.value)})}\r\n                value={signedInUser ? signedInUser.name : ''} />\r\n        </section>\r\n    );\r\n}\r\n\r\n\r\nexport default UserInput;","import React from \"react\";\r\n\r\nimport ThemeTogglerButton from '../components/theme-toggler-button';\r\nimport UserInput from '../components/user-input';\r\n\r\nfunction handleOnSubmit(event) {\r\n    event.preventDefault();\r\n}\r\n\r\nexport default function InputPage() {\r\n    return (\r\n        <form onSubmit={handleOnSubmit}>\r\n            <UserInput />\r\n            <br />\r\n            <ThemeTogglerButton />\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\n","import React from 'react';\nimport { Route, Link, BrowserRouter as Router, Switch } from 'react-router-dom'\n\nimport { ThemeContext, themes } from './contexts/ThemeContext';\nimport { UserContext, user } from './contexts/UserContext';\n\nimport ProfilePage from './pages/profile-page';\nimport InputPage from './pages/input-page';\n\nimport './App.css';\n\n\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.setUser = (value) => {\n      this.setState(state => ({\n        signedInUser: {\n          user: value,\n          setUser: this.setUser\n        }\n      }));\n    }\n\n    this.setTheme = (value) => {\n      this.setState(state => ({\n        theme: {\n          selectedTheme: value,\n          setTheme: this.setTheme\n        }\n      }));\n    }\n\n    this.state = {\n      signedInUser: {\n        user: user,\n        setUser: this.setUser\n      },\n      theme: {\n        selectedTheme: themes.light,\n        setTheme: this.setTheme\n      }\n    }\n  }\n\n  render() {\n    // App component that provides initial context values\n    return (\n      <ThemeContext.Provider value={this.state.theme}>\n        <UserContext.Provider value={this.state.signedInUser}>\n          <Router>\n            <Layout />\n          </Router>\n        </UserContext.Provider>\n      </ThemeContext.Provider>\n    );\n  }\n}\n\nfunction Layout() {\n  return (\n    <ThemeContext.Consumer>\n      {theme => (\n        <div style={theme.selectedTheme}>\n          <Header />\n          <Toolbar />\n          <br />\n          <Content />\n        </div>\n      )}\n    </ThemeContext.Consumer>\n  );\n}\n\nfunction Header() {\n  return (\n    <header>\n      <h1 style={{ margin: \"inherit\" }}>\n        Paul's Test App\n      </h1>\n    </header>\n  )\n}\n\nfunction Toolbar() {\n  return (\n    <ThemeContext.Consumer>\n      {theme => (\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\" style={theme.selectedTheme}>Display Data</Link>\n            </li>\n            <li>\n              <Link to=\"/input\" style={theme.selectedTheme}>Enter Data</Link>\n            </li>\n          </ul>\n        </nav>\n      )}\n    </ThemeContext.Consumer>\n  )\n}\n\n// A component may consume multiple contexts\nfunction Content() {\n  return (\n    <div style={{ paddingLeft: \"25px\" }}>\n      <Switch>\n        <Route exact path=\"/\" component={ProfilePage} />\n        <Route path=\"/input\" component={InputPage} />\n      </Switch>\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}